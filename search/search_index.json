{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the ISDN2602 Final Project Website</p> <p>Changelog</p> <p>Nothing at the moment.</p> <p>(This section will be updated when there are changes to the documentation or project requirements. Hopefully won't be any.)</p>"},{"location":"batteryRecharing/","title":"Battery Recharging","text":"<p>Each team will be provided with a smart car and two rechargeable LiPo batteries to power your smart car during the final demo and testing, all labelled with your team number (e.g. Final Project Group 18 will have the car labelled as '18' and the batteries labelled as '18A' and '18B').</p>"},{"location":"batteryRecharing/#steps-to-recharge-the-battery","title":"Steps to Recharge the Battery","text":"<ol> <li> <p>Unlock the safety box and open the lid.</p> <p>Inside the box, you will see the Balance Charger B6AC and the charging module for you to plugin your battery.</p> </li> <li> <p>Turn on the power supply. </p> <p>The screen of the Balance Charger will light up.</p> </li> <li> <p>Switch off the black toggle switch on charging module. </p> </li> <li> <p>Plugin your battery to the charging module.</p> <p>Pay attention to the orientation of the battery connector (do not force push if it does not fit) and ensure it is firmly connected.</p> </li> <li> <p>On the Balance Charger, select the battery type and set the charging current according to the battery specifications. </p> <p>If you see 'LiPo Balance' mode with 2.4A and 7.4V (2S), then it's correct.</p> <p>If not, please press the 'Batt. Type' button, select 'LiPo Batt', click 'Enter' button to confirm. Then use the 'Dec' and 'Inc' buttons to select 'LiPo Balance with 2.4A and 7.4V (2S)'.</p> </li> <li> <p>Switch on the switch on charging module. </p> </li> <li> <p>Long press the 'Start/Enter' button on Balance Charger</p> <p>If it prompts \"CONNECTION BREAK\", please double-check you have correctly plugged in the battery and turned on the switch on the charging module.</p> <p>If it shows the battery module and the text 'CONFIRM(ENTER)', click 'Start/Enter' button again to start charging.</p> </li> <li> <p>Done, wait for the charging to complete. Please close back the safety box lid.</p> </li> </ol>"},{"location":"batteryRecharing/#steps-to-take-out-the-battery-after-recharging","title":"Steps to Take Out the Battery After Recharging","text":"<ol> <li>Press the 'Stop / Batt. Type' button on the Balance Charger to stop charging.</li> <li>Switch off the black toggle switch on charging module.</li> <li>Unplug your battery from the charging module.</li> </ol> <p>If no other batteries are charging, please</p> <ol> <li>Turn off the power supply.</li> <li>Close the lid of the safety box and lock it.</li> </ol> <p>If there're others' batteries still charging, please redo the above charging steps.</p>"},{"location":"controlPanel/","title":"Control Panel","text":"<p>We will be using the control panel to configure the final demo setting and send commands to your smart cars, including the demo timer, task ID, start and end points, etc. </p> <p>The control panel links directly to the Firebase realtime database which your car will be given the <code>WEB API KEY</code> to read off data from it. </p> <p>We will also be giving you the access to use the control panel for testing, which your data will be stored under your own user ID, similar to what you have done during the Firebase lab. </p> <p>You need to </p> <ol> <li>Sign up and login to the control panel at our Control Panel Site: panel.isdn2602.site</li> <li>Copy your user ID (should be visible at the top right corner of the app)</li> <li>Input the user ID string to your skeleton code (so your car will only read your commands and not be confused by others' commands)</li> <li>(Optional) Turn on the <code>Serial.print</code> for retrieving Firebase data and see if the data matches the command you set on your control panel</li> </ol> <p>Notice</p> <ol> <li>Any attempts to write to the Realtime database other than those allowed on the control panel website is strictly prohibited.</li> <li>Please only use the control panel when necessary i.e. when you are testing and are physically present at Room 4223.</li> <li>Please close the website when it is not in use to minimize data traffic.</li> <li>Please remember your username and password for login. We currently do no provide account retrieval service.</li> </ol>"},{"location":"map/","title":"Map Layout","text":""},{"location":"map/#map-layout-for-final-project-arena","title":"Map Layout for Final Project Arena","text":"<ul> <li>For tile board RFID information, please refer to Board IDs from 1 - 25</li> <li>For traffic light information, please use traffic light IDs 1 - 4</li> <li>The 3 parking slots have been labelled with IDs 1 - 3. You should park the car accordingly to the parking slot at the given end point.</li> </ul>"},{"location":"map/#map-layout-for-testing-field","title":"Map Layout for Testing Field","text":"<ul> <li>For tile board RFID information, please refer to Board IDs from 26 - 35</li> <li>For traffic light information, please use traffic light ID 5</li> </ul> <p>Notice</p> <ul> <li>You may walk on the pathway between the two fields to retrieve your car during testing, but do not step on the fields or remove the fences around the fields.</li> <li>Also, please do not remove any tiles and make sure they are properly connected to each other.</li> </ul>"},{"location":"network/","title":"Network Configuration","text":"<p>For ESP32 boards (or other MCU that is not compatible with 5GHz) please connect to:</p> <ul> <li>WIFI SSID (2.4GHz): <code>ISDN2602_2G</code></li> <li>WIFI Password: <code>isdn2602@iot</code></li> </ul> <ul> <li>Please input the above network credentials to your final project code for your smart car to connect to the internet.</li> <li>You don't need to connect your device to the same network to use the control panel.</li> </ul>"},{"location":"qna/","title":"Q &amp; A","text":"<p>Please use the comment section below to ask any questions you have about the project, documentation, or anything related. We'll do our best to respond promptly and help clarify any doubts.</p> <p>If you think you can help answer other classmates' questions, feel free to contribute!</p>"},{"location":"rfidReference/","title":"Tile RFID Reference","text":"<p>Here you can find the RFID tags to all tiles: Complete List of all Tiles' RFID</p> <p>The final demo arena consists of 5*5 = 25 Tiles with the Tile Board IDs showing below: </p> <p>Each tile consists of 9 RFIDs with the indices showing below:</p> <ul> <li>0 as the center RFID</li> <li>1 and 2 for UP direction</li> <li>3 and 4 for DOWN direction</li> <li>5 and 6 for LEFT direction</li> <li>7 and 8 for RIGHT direction</li> </ul> <p></p>"},{"location":"uploadConfig/","title":"Upload Config","text":"<p>The Board we are using is ESP32S3 Dev Module</p> <p></p>"},{"location":"skeleton_code/firebase/","title":"Firebase related","text":""},{"location":"skeleton_code/firebase/#arduino-libraries-needed-to-be-installed","title":"Arduino Libraries Needed to be Installed","text":"<p>FirebaseClient (latest version &gt;= 2.2)</p> <p></p> <p>ArduinoJson (latest version &gt;= 7.4)</p> <p></p>"},{"location":"skeleton_code/firebase/#firebase-configuration","title":"Firebase configuration","text":"<p>In the <code>config.cpp</code> file</p> <pre><code>// TODO\n// Demo config\nconst bool demoMode = false;\n// Set to true to enable demo mode - to read from examStates data from /admin\n// Set to false to read from /users/&lt;uid&gt;/examState when testing by yourself\n\n//...\n// TODO\nconst String USER_EMAIL = \"your_email@example.com\";\nconst String USER_PASSWORD = \"your_password\";\nconst String UID = \"your_unique_user_id\";\n</code></pre> <p>Info</p> <p>If you have not sign up an account on the control panel website, please checkout Control Panel page and follow the instructions there to do so.</p> <ul> <li>You need to input your email and password for authentication (control panel login info)</li> <li>And input your user ID (obtained from the control panel website) to get the examState data from your own path</li> <li>During testing you should set the <code>demoMode</code> to false to read under your own path with your user ID</li> <li>Before the actual demo day of the final project, you should upload the code with <code>demoMode = true</code> in order to receive the examState commands sent from the admin</li> </ul>"},{"location":"skeleton_code/firebase/#firebase-related-code-explanation","title":"Firebase related code explanation","text":""},{"location":"skeleton_code/firebase/#firebase-components","title":"Firebase components","text":"<pre><code>/*-------------Firebase Components-------------*/\nFirebaseApp app;\nWiFiClientSecure ssl_client1;\nusing AsyncClient = AsyncClientClass;\nAsyncClient aClient1(ssl_client1);  // For read operations\nRealtimeDatabase Database;\n\n// Authentication\nUserAuth user_auth(API_KEY, USER_EMAIL, USER_PASSWORD);\n</code></pre>"},{"location":"skeleton_code/firebase/#firebase-tasks","title":"Firebase Tasks","text":""},{"location":"skeleton_code/firebase/#inside-void-setup","title":"Inside <code>void setup()</code>","text":"<pre><code>void setup() {\n    // ...\n    // Initialize the Wi-Fi Connection\n    // LED blinking while connecting to WiFi\n    WiFiManager::initialize();\n    Serial.println(\"WiFi Initialized\");\n\n    // Configure SSL clients\n    ssl_client1.setInsecure();\n    ssl_client1.setConnectionTimeout(1000);\n    ssl_client1.setHandshakeTimeout(5);\n\n    // Initialize Firebase Realtime Database\n    initializeApp(aClient1, app, getAuth(user_auth), processData);\n    app.getApp&lt;RealtimeDatabase&gt;(Database);\n    Database.url(DATABASE_URL);\n    Serial.println(\"FireBase Initialized\");\n\n    // ...\n    xTaskCreatePinnedToCore(FirebaseMainTask, \"Firebase Main Task\", 8192, NULL, 1,\n                            &amp;FirebaseMainTaskTCB, 0);\n    xTaskCreatePinnedToCore(FirebaseReadTask, \"Firebase Read Task\", 8192, NULL, 2,\n                            &amp;FirebaseReadTaskTCB, 0);\n\n    // ...\n    vTaskDelay(10);\n\n}\n</code></pre>"},{"location":"skeleton_code/firebase/#firebase-main-task","title":"Firebase Main Task","text":""},{"location":"skeleton_code/firebase/#firebase-read-task","title":"Firebase Read Task","text":""},{"location":"skeleton_code/firebase/#firebase-helper-function","title":"Firebase helper function","text":"<pre><code>// Firebase heler function to process async results\nvoid processData(AsyncResult &amp;aResult) {\n  if (!aResult.isResult()) return;\n\n  //   DEBUG - Log event, debug, and error messages\n  //   if (aResult.isEvent())\n  //     Firebase.printf(\"Event task: %s, msg: %s, code: %d\\n\",\n  //                     aResult.uid().c_str(),\n  //                     aResult.eventLog().message().c_str(),\n  //                     aResult.eventLog().code());\n\n  //   if (aResult.isDebug())\n  //     Firebase.printf(\"Debug task: %s, msg: %s\\n\", aResult.uid().c_str(),\n  //                     aResult.debug().c_str());\n\n  //   if (aResult.isError())\n  //     Firebase.printf(\"Error task: %s, msg: %s, code: %d\\n\",\n  //                     aResult.uid().c_str(),\n  //                     aResult.error().message().c_str(),\n  //                     aResult.error().code());\n\n  if (aResult.available()) {\n    // DEBUG - Log the task and payload\n    // Firebase.printf(\"task: %s, payload: %s\\n\", aResult.uid().c_str(),\n    //                 aResult.c_str());\n  }\n}\n</code></pre> <p>If you encounter issue reading data from Firebase, please turn on the <code>Serial.print</code> debug info in the <code>processData</code> function to see what is going on.</p> <ul> <li>If you see error message starts with <code>Error task: ...</code> or <code>Debug task: ...</code>, it usually means there is something wrong with your authentication (email/password) or your user ID is incorrect.</li> <li>If you could see the <code>task: ... payload: ...</code> message but the payload is empty, it usually means your <code>examState</code> or <code>trafficLights</code> data is not set correctly on the control panel website or the JSON format parsing process is not done correctly.</li> </ul>"},{"location":"skeleton_code/hardware-pinout/","title":"Hardware and Pinout","text":""},{"location":"skeleton_code/main/","title":"Main Code <code>.ino</code> File","text":""},{"location":"skeleton_code/motor/","title":"Motor Control","text":""},{"location":"skeleton_code/movement/","title":"Movement","text":""},{"location":"skeleton_code/sensor/","title":"Sensors","text":""},{"location":"skeleton_code/sensor/#infrared-sensor-ir-sensor","title":"Infrared Sensor (IR Sensor)","text":""},{"location":"skeleton_code/sensor/#ir-configuration","title":"IR Configuration","text":"<pre><code> // IR Sensor Configuration\n    /*\n           L   M   R  \n            \\  |  /              \n             \\ | /       ^\n              \\|/        |\n              Car      Front\n\n    */\n</code></pre>"},{"location":"skeleton_code/sensor/#irsensorhpp","title":"<code>IRSensor.hpp</code>","text":"<p>Define the namespace <code>IRSensors</code> to encapsulate all IR sensor related functions and variables, thus to use functions and variables in the main code file <code>.ino</code>, need to add prefix with <code>IRSensors::</code>.</p> <pre><code>namespace IRSensors {\n    // ...\n}\n</code></pre> <p>Define the <code>RobotState</code> enum (list of <code>uint8_t</code> numbers) to represent the various states of the robot based on the readings from the three IR sensors (Left, Middle, Right).</p> <pre><code>// Robot States\n    enum RobotState : uint8_t {\n        /* The logic of the IR sensor and its output\n        |    Tile Colour   |  digitalRead() |\n        |      Black       |    1 (HIGH)    |\n        |      White       |     0 (LOW)    |\n         */\n        /*  Logic Reference Table\n        |    uint8_t     |     boolean ( digitalRead() )  |\n        |   RobotState    |   IR_L   |   IR_M   |   IR_R   |\n        |        0        |     0    |     1    |     0    |\n        |        1        |     1    |     1    |     0    |\n        |        2        |     1    |     1    |     1    |\n        |        3        |     1    |     0    |     1    |\n        |        4        |     0    |     1    |     1    |\n        |        5        |     0    |     0    |     1    |\n        |        6        |     1    |     0    |     0    |\n        |        7        |     0    |     0    |     0    |\n\n        |*/\n        Middle_ON_Track,        // 0 \n        Left_Middle_ON_Track,   // 1\n        ALL_ON_Track,           // 2\n        Left_Right_ON_Track,    // 3\n        Middle_Right_ON_Track,   // 4\n        Right_ON_Track,         // 5\n        Left_ON_Track,          // 6\n        All_OFF_Track           // 7 \n    };\n</code></pre> <p>Define the <code>IRSensorData</code> structure to hold the readings from the three IR sensors and the current state of the robot.</p> <pre><code> // IR Sensor Structure\nstruct IRSensorData {\n    // Sensor states\n    bool Read_IR_L;\n    bool Read_IR_M;\n    bool Read_IR_R;\n    uint8_t state;\n};\n</code></pre> <p>Declare a global instance of <code>IRSensorData</code> that can be accessed across different files.</p> <pre><code>// Global IR sensor instance\nextern IRSensorData IRData;\n</code></pre> <p>Declare the initialization and sensor reading functions for the IR sensors. The actual implementations will be in the <code>IRSensors.cpp</code> file.</p> <pre><code>// Function declarations\nvoid Init();\nuint8_t ReadSensorState(IRSensorData&amp; IRData);\n</code></pre>"},{"location":"skeleton_code/sensor/#irsensorscpp","title":"<code>IRSensors.cpp</code>","text":"<p>Initialize the global IR sensor instance with default values of <code>false</code> for each sensor reading and <code>Middle_ON_Track</code> for the robot state. <pre><code>// Global IR sensor instance\nIRSensorData IRData = {\n    false,          //bool Read_IR_L;\n    false,          //bool Read_IR_M;\n    false,          //bool Read_IR_R;\n    Middle_ON_Track //RobotState state;\n    };\n</code></pre></p> <p>Configure the GPIO setup for the IR Sensor pins <pre><code>void Init() {\n    // Initialize IR sensor pins\n    pinMode(Pinout::IRLeft, INPUT);\n    pinMode(Pinout::IRMiddle, INPUT);\n    pinMode(Pinout::IRRight, INPUT);\n};\n</code></pre></p> <p>Function to read the current state of the IR sensors and match to the robot's state based on the sensor readings. <pre><code>uint8_t ReadSensorState(IRSensorData&amp; IRData){\n    /*Scan all the IR sensors to get the current status of the car*/\n    IRData.Read_IR_L = digitalRead(Pinout::IRLeft);\n    IRData.Read_IR_M = digitalRead(Pinout::IRMiddle);\n    IRData.Read_IR_R = digitalRead(Pinout::IRRight);\n\n    /*According to the current status of the IR Sensors, determine the RobotState*/\n    if(IRData.Read_IR_L == 0 &amp;&amp; IRData.Read_IR_M == 1 &amp;&amp; IRData.Read_IR_R == 0 ){\n        return Middle_ON_Track;\n    } else if (...){\n        // ...\n    }\n    // Continue for other states...\n\n    return 10; //Error Code if none of condition fits.\n}\n</code></pre></p>"},{"location":"skeleton_code/sensor/#rfid-reader","title":"RFID Reader","text":""},{"location":"skeleton_code/sensor/#inertial-measurement-unit-imu","title":"Inertial Measurement Unit (IMU)","text":""},{"location":"skeleton_code/sensor/#ultrasonic-sensor","title":"Ultrasonic Sensor","text":""}]}